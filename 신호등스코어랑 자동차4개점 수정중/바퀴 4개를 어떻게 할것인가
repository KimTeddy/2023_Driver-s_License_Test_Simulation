#include <GL/glut.h>

float xcar = 0.0, ycar = 0.0;
float xcar_A = xcar - 5, ycar_A = ycar - 2;
float xcar_B = xcar - 5, ycar_B = ycar + 2;
float xcar_C = xcar + 5, ycar_C = ycar + 2;
float xcar_D = xcar + 5, ycar_D = ycar - 2;

void drawThickRedLine(float x1, float y1, float z1, float x2, float y2, float z2, float thickness) {
    glEnable(GL_LINE_SMOOTH);  // 선을 부드럽게 표시하도록 설정
    glLineWidth(thickness);    // 선의 두께 설정
    glColor3f(1.0f, 0.0f, 0.0f);  // 빨간 색상으로 설정

    // 두꺼운 빨간 선 그리기
    glBegin(GL_LINES);
    glVertex3f(x1, y1, z1);
    glVertex3f(x2, y1, z2);
    glEnd();
}


void drawCarPoints() {
    // Draw Point 1
    glPointSize(10.0f);
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_POINTS);
    glVertex3f(xcar, 1.0, ycar);
    glEnd();

    // Draw Point 2
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_POINTS);
    glVertex3f(xcar_A, 1.0, ycar_A);
    glEnd();

    // Draw Point 3
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_POINTS);
    glVertex3f(xcar_B, 1.0, ycar_B);
    glEnd();

    // Draw Point 4
    glColor3f(1.0, 1.0, 0.0);
    glBegin(GL_POINTS);
    glVertex3f(xcar_C, 1.0, ycar_C);
    glEnd();

    // Draw Point 5
    glColor3f(1.0, 0.0, 1.0);
    glBegin(GL_POINTS);
    glVertex3f(xcar_D, 1.0, ycar_D);
    glEnd();
}

void drawGround() {
    glPushMatrix();
    glColor3f(0.5, 0.5, 0.5);
    glTranslatef(0.0, -0.5, 0.0);
    glScalef(100.0, 1.0, 60.0);
    glutSolidCube(1.0);

    glPushMatrix();
    glColor3f(0.1, 0.1, 0.1);
    glLineWidth(2);
    glutWireCube(1.0);
    glPopMatrix();
    glPopMatrix();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glLoadIdentity();
    gluLookAt(0.0, 60.0, 60.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0);
    drawCarPoints();
    // Draw red lines connecting points A, B, C, D
    drawThickRedLine(xcar_A, 1.0, ycar_A, xcar_B, 1.0, ycar_B, 2.0);  // A to B
    drawThickRedLine(xcar_B, 1.0, ycar_B, xcar_C, 1.0, ycar_C, 2.0);  // B to C
    drawThickRedLine(xcar_C, 1.0, ycar_C, xcar_D, 1.0, ycar_D, 2.0);  // C to D
    drawThickRedLine(xcar_D, 1.0, ycar_D, xcar_A, 1.0, ycar_A, 2.0);  // D to A

    drawGround();
    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (float)w / (float)h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(1024, 768);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Car Points and Ground");
    glEnable(GL_DEPTH_TEST);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMainLoop();
    return 0;
}
